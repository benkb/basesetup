" --------- start
"  todo: cleaning this up one day

"autowrite for the haxe/vaxe autocompl to work
set autowrite

"
" Searchich
set ignorecase
" When searching try to be smart about cases
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch

set shell=/bin/sh
set modelines=1

set nu
set noerrorbells
set vb t_vb=

set nocompatible
behave xterm

if !empty(glob(expand("~/.vim/autoload/pathogen.vim")))
   if !empty(glob(expand("~/.vim/bundle")))
      execute pathogen#infect()
   endif
endif

syntax on
filetype plugin indent on

set autoindent

" tabstop:          Width of tab character
" softtabstop:      Fine tunes the amount of white space to be added
" shiftwidth        Determines the amount of whitespace to add in normal mode
" expandtab:        When this option is enabled, vi will use spaces instead of tabs
set tabstop=3
set softtabstop=3
set shiftwidth=3
set expandtab


" because of strange chars in backspace
set backspace=indent,eol,start

" escape terminal in nvim
tnoremap <Esc> <C-\><C-n>

set colorcolumn=80

"set splitright
set nosplitright


au BufNewFile,BufRead *.scm setl filetype=scheme
au BufNewFile,BufRead *.ss setl filetype=scheme
au BufNewFile,BufRead *.jnt setl filetype=scheme
au BufNewFile,BufRead *.janet setl filetype=scheme
au BufNewFile,BufRead *.l setl filetype=scheme

au BufNewFile,BufRead *.osa setl filetype=applescript
au BufNewFile,BufRead *.applescript setl filetype=applescript

autocmd BufNewFile,BufRead *.nw   set filetype=noweb
autocmd BufNewFile,BufRead *.rnw   set filetype=rnoweb


if has("gui_running")
syntax on
	set hlsearch
	colorscheme slate
	"set	guifont=Monaco:h15
  if has("gui_gtk2")
    set guifont=Inconsolata\ 14
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h18
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  else
    "set guifont=Monospace 12
  endif
	set bs=2
	set ai
endif



let mapleader=","
let maplocalleader=","


for fpath in split(globpath('~/.config/vim/', '*.vim'), '\n')
   exe 'source' fpath
endfor


" Syntax stuff
au VimEnter * syntax keyword Statement lambda conceal cchar=Î»
au VimEnter * hi! link Conceal Statement
au VimEnter * set conceallevel=2

" Faster buffer switch
nnoremap <Leader>b :ls<CR>:b<Space>

syntax enable


" gui colors
set background=dark
hi SpecialKey guifg=Blue
hi MoreMsg guifg=Green
hi Visual guifg=NONE guibg=NONE
hi Folded ctermbg=4 guibg=Blue
hi FoldColumn ctermbg=7
hi DiffAdd guibg=Blue
hi DiffChange guibg=Magenta
hi DiffDelete guibg=Cyan
hi Normal guifg=Gray guibg=Black
hi Cursor guibg=White
hi lCursor guibg=White
hi Comment guifg=Cyan
hi Constant guifg=Magenta
hi Special guifg=Red
hi Identifier guifg=Cyan
hi Statement guifg=Yellow
hi PreProc guifg=Blue
hi Type guifg=Green
hi Underlined guifg=Blue
hi Todo guifg=Black

set showtabline=2
set guioptions+=e


inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-Space>
inoremap <C-@> <c-x><c-o>
let g:slime_target = "tmux"


"augroup rainbow_lisp
"  autocmd!
"  autocmd FileType lisp,clojure,scheme RainbowParentheses
"augroup END

let g:vim_parinfer_globs = ['*.lisp', '*.fnl', '*.scm']


if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

endif

map <leader>r :Ranger<CR>

" tab key
"set wildmode=longest:full,full
"set wildmenu
"
inoremap <silent><expr> <tab> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<TAB>"
inoremap <silent><expr> <cr> "\<c-g>u\<CR>"


" Remap arrow keys to resize window
nnoremap <Up>    :resize -2<CR>
nnoremap <Down>  :resize +2<CR>
nnoremap <Left>  :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>

      
nmap <F8> :TagbarOpen j<CR>
set nofoldenable

nnoremap j a
nnoremap a j

vnoremap j a
vnoremap a j


"refresh syntax higlight (specially helpfulll for large multi-syntax files
"like org-mode
if v:progname ==? 'vim'
   nnoremap s :w<cr>:syn sync fromstart<cr>
endif
